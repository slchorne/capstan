CAPSTAN(1)            User Contributed Perl Documentation           CAPSTAN(1)



NNAAMMEE
       capstan : an implementation of RFC 5011 for Infoblox

SSYYNNOOPPSSIISS
         ./capstan.pl

         ./capstan.pl --init --gm my.grid.master --user admin

         ./capstan.pl -a org
         ./capstan.pl -a org -v internal
         ./capstan.pl -a org -m ns1.myco.com

        Options:

         -a <domain>   Add a domain to track
         -r <domain>   Remove a domain to track
         -v <view>     Add/Remove a domain from this view
         -m <member>   Add/Remove a domain from this member
         -l            List tracked domains
         -k            List tracked keys

         -ns <name>    Set the query nameserver to this member

         -help      Show a brief help message
         -C         Show the current configuration
         -c         Show just the local configuration

         --init         Initialise the system (only runs once)
                        requires --gm and --user
           --gm <name>  Set the Grid Master
           --user       Set the username (and password) for login

DDEESSCCRRIIPPTTIIOONN
   PPrreerreeqquuiissiitteess
       Capstan tries to use as few deps as possible, but it was unavoadable.
       you're going to need:

        * Storable
        * Term::ReadKey
        * Digest::md5
        * Net::DNS (and DNSSec extensions)
        * Infobox.pm (until this gets ported to the REST API)

       You're also going to need DNS query access to the outside world, as
       this script needs to pull the keys from signed zones and trust anchor
       points.

   QQuuiicckkssttaarrtt
       Capstan is a scheduled script that will manage and update the trust
       anchors for DNSSec zones. It does thus by tracking state with a custom
       zone on the infoblox grid (rfc5011.local) and adding EAs on both these
       records, the zone, and the trust anchors themselves.

       It is designed to be robust enouth to handle admins making changes
       directly on the grid, outside this script.

       Almost all the configuration is stored on the grid, which should help
       with disaster recovery.

       _I_n_i_t_i_a_l_i_s_e _t_h_e _s_y_s_t_e_m_.

       You need to bootstrap the management zone and create a local config
       file:

        ./capstan.pl --init --gm my.grid.master --user admin

       _D_e_f_i_n_e _a _r_e_s_o_l_v_e_r _m_e_m_b_e_r

       You need to use a grid member to make your DNS queries to the outside
       world, This ensures that the grid (in theory) has the same view of the
       trust anchors as this script. So you need to set that up (once) in the
       config.

        ./capstan.pl -ns my.grid.nameserver

       Obviously, this member needs to be able to resolve to the internet

       _M_a_n_u_a_l_l_y _a_d_d _s_o_m_e _t_r_u_s_t _a_n_c_h_o_r_s

       You must prime the system by adding an initial trust anchor for
       whatever zones you want to track. this is a bacic securlty measure and
       the system will error out if it can't find a matching anchor.

       You do this through the Infoblox Grid GUI.

       _A_d_d _s_o_m_e _z_o_n_e_s _t_o _m_a_n_a_g_e

       Then you need to add some trust anchor points, and decide if you want
       to track them on a grid, view or member level (you can add trust
       anchors at any of these points)

       Example: Add '.org' at the grid level for tracking

         ./capstan.pl -a org

       Example: Add '.org' at the view level for tracking

         ./capstan.pl -a org -v internal

       Example: Add '.org' at the member level for tracking

         ./capstan.pl -a org -m ns1.myco.com

       _U_p_d_a_t_e _y_o_u_r _a_n_c_h_o_r_s_, _a_s _r_e_q_u_i_r_e_d

       Now you can just run the script periodically to keep stuff in sync

        ./capstan.pl

OOPPTTIIOONNSS
   --aa <<ddoommaaiinn>>
       Add a domain to the tracker, primed by an initial trust anchor(s)

       This will look in the existing trust anchor in the Grid, View or Member
       DNS properties, and, if it finds one, use this to prime a lookup for
       the published trust anchors for that domain.

       All the published keys will then be tracked for that domain.

       You only need a single key to be added to the DNS settings to prime the
       domain

       This will create a TXT record(s) in the rfc5011.local zone for the
       namespace of the tracked domain

   --rr <<ddoommaaiinn>>
       Remove a domain to the tracker

       This will remove the matching TXT record in the rfc5011.local zone for
       the namespace of the tracked domain

   --ll
       List all the domains being tracked

       This will get all the TXT records in the rfc5011.local zone where the
       extensible_attribute 'RFC5011Type' == 'domain'

   --kk
       List all the trust anchors being tracked

       This will get all the TXT records in the rfc5011.local zone where the
       extensible_attribute 'RFC5011Type' == 'key' and show what domain and
       area of the grid they relate to

   --nnss <<ggrriidd..nnaammeesseerrvveerr>>
       Set the grid member to be used for DNS queries.

       Thus must be a grid member, and needs to be able to make recursive
       queries for the domains being managed by this utility.

   ----ggmm <<ggrriidd..mmaasstteerr>>
       Set or change the GM address/name that the system manages.

       This is usually done as part of the '--init' process, but may nttd to
       be updated as part of a grid re-configuration (E.g DR)

   ----uusseerr <<uusseerrnnaammee>>
       Set or change the username (and password) configured to make API calls
       to the grid.

       You will be prompted to enter the password

   --cc
       Show just the local configuration settings ( grid master, username ,
       etc )

   --CC
       Show the complete configuration settings, including all tracked domains
       and keys

   ----iinniitt
       Initialise the system and configure all required settings.  You should
       only ever need to do this once

         ./capstan.pl --init --gm my.grid.master --user admin

       This requires you to specify the grid master, and you will be prompted
       for a password for the user account. The use must be enabled for API
       access and be able to modify DNS zones, records, Grid DNS settings,
       Grid memners and extensible_attributes FORCE

       The init process will :

        - create any required extensible_attributes
        - create the zone 'rfc5011.Infoblox.local'
        - set up any other required configuration

DDAATTAA SSTTOORRAAGGEE
       The IETF has a number of drafts (and RFCs) relating to the storage and
       management of trust anchors, while at the same time acknowleging the
       conflicts that may occur when applying these rules to RFC5011.

       This is further compounded by the way trust anchors are stored on the
       infoblox grid, and that RFC5011 requires you to track DNSKEYS that are
       not in the published RRSET for a domain.

       This utility follows the basic principle of all those recomendations in
       that the management system should not rely on the keys in its database
       but merely use them to prime queries for records in the DNS.

       It should also be noted tht while DNSKEY RRs and RRSIG rrs can be
       related via the 'keytag', this tag will change if a key is revoked, so
       that method can't be used to track a key through it's lifecycle. The DS
       signature can't be used for simliar reasons. (see the section on
       'KEYTAGS')

       As such, the system uses the following components to track a trust
       anchor through its life cycle:

       Untracked trust anchors
           Untracked Trust anchors are added manually to the Grid,view, or
           member DNSSEC settings. This is how you bootstrap a domain

       Valid trust anchors
           Valid trust anchors are automatically added and removed to the
           Grid,view, or member DNSSEC settings

           The algorithm field in the Infoblox settings uses a different
           format to the one described in any of the RFCs or in the
           Net::DNS::Sec libraries. A lookup table is used to convert between
           the formats

       rfc5011.infoblox.local zone
           The utility tracks all other configuration in the disabled dns zone
           'rfc5011.infoblox.local'. This zone shoud only ever contain TXT
           records.  And modifying it by hand will obviously cause some issues

       Tracked domains
           Tracked domains are added as TXT records to the
           'rfc5011.infoblox.local' zone. The records are added in the form

               DOMAIN.NAME.LEVEL.rfc5011.infoblox.local

           e.g:

               org.default.grid.rfc5011.infoblox.local IN TXT
               org.ns1.company.member.rfc5011.infoblox.local IN TXT
               org.internal.view.rfc5011.infoblox.local IN TXT

       Tracked keys
           Tracked keys are added as TXT records to the
           'rfc5011.infoblox.local' zone. The records are added in the form

               GRIDID.key.DOMAIN.NAME.LEVEL.rfc5011.infoblox.local

           The state and timers and other information are stored in
           extensible_attributes on the record.

           e.g:

               9795.key.org.default.grid.rfc5011.infoblox.local IN TXT
               21366.key.org.ns1.company.member.rfc5011.infoblox.local IN TXT
               9795.key.org.internal.view.rfc5011.infoblox.local IN TXT

           The GRIDID is not the keytag for the record, as this could change
           if a key is revoked or similar. Instead it is a variation of the
           keytag that ignores any flags that are set on the RR.  As such, the
           DNSKEY keytag can't be directly used to match a queried RR to one
           in the config.  ( see the section on KEYTAGS )

           The KEY is not stored on the record, just the ID that is then used
           to find a matching record from a valid current DNS query.

KKEEYYTTAAGGSS
       Why do I see 2 different keytags or ids for a DNSKEY ?

       The keytag algorithm is calculated from both the key and the flags in
       the DNSKEY record.  While this tag can be used to match a key to it's
       signature, if you REVOKE a key you change the flags, and thus the tag.
       So it is no longer possible to use the tag to compare a revoked key to
       its unrevoked version.

       This tool calculates a new, different, tag that ignores all the flags
       and just calculates the value from the key itself.  The logging reports
       both tags so you can compare resulds from DNS queries to results
       calculated internally by this tool.

       The algorithm used is a variation of the one defined in RFC4034
       Appendix B, with the 'flags','protocol' and 'algorithm' are all set to
       0.

DDIIAAGGNNOOSSTTIICCSS
       Use '-d N' to run at different diagnostic/debug levels

       The higher the number, the more feedback you get

   MMeessssaaggeess
       Messages are logged with either an 'INFO' , 'WARN' or 'ERROR' header:

       "ERROR : The record '8763.key....' already exists"
           You are trying to add or track a domain that is already in the
           tracking system.  This is mostly benign, but the state of that key
           will be incorrect until the system runs again and re-validates all
           the keys.

           [Description of error here]

       "Another error message here"
           [Description of error here]

           [Et cetera, et cetera]

DDEEPPEENNDDEENNCCIIEESS
        Storable
        Net::DNS, Net::DNS::Sec
        Infoblox.pm
        Digest::MD5

IINNCCOOMMPPAATTIIBBIILLIITTIIEESS
       Not all algorithms are supported, as a manual lookup table is required
       to convert beteen public and Infoblox supported algorithms

       Unicode may be a problem, dependong on the domain name being added as
       SEP.

       I have not yet thought through other incompatibilities, though there
       are most certainly some. I don't like code that is longer than 72
       characters per line, you may hate me for that.

BBUUGGSS
       No bugs have been reported. Yet.

SSEEEE AALLSSOO
           perldoc, perlfunc

AAUUTTHHOORR
       Copyright (c) 2015, Geoff Horne, SLC . All rights reserved.



perl v5.18.2                      2019-03-28                        CAPSTAN(1)
